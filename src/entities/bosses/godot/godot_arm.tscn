[gd_scene load_steps=18 format=3 uid="uid://dptehxrxtfpx3"]

[ext_resource type="Script" uid="uid://d80inedj64w" path="res://src/entities/bosses/godot/godot_arm.gd" id="1_7th0q"]
[ext_resource type="Texture2D" uid="uid://crwjrqqrb5lxs" path="res://assets/texture/npc/bosses/boss_godot/arm.png" id="3_r7kdd"]
[ext_resource type="Script" uid="uid://chv2lphkgpnes" path="res://src/commons/components/etc/hurtbox_component.gd" id="4_0p2h0"]
[ext_resource type="Script" uid="uid://dkij5hjdnu422" path="res://src/commons/components/etc/hitbox_component.gd" id="5_64dyw"]
[ext_resource type="Script" uid="uid://co2kl5qnx2yrs" path="res://src/commons/components/movements/idle_move_component.gd" id="6_ts7ta"]
[ext_resource type="Script" uid="uid://1hf68snymgbl" path="res://src/commons/components/sfx/ghost_trailing_component.gd" id="8_0p2h0"]
[ext_resource type="Script" uid="uid://c3dex51h0lylc" path="res://src/commons/components/sfx/hit_flash_component.gd" id="8_64dyw"]
[ext_resource type="Texture2D" uid="uid://8wkr5neo2iq7" path="res://assets/texture/sfx/4x_white_particle.png" id="8_r7kdd"]

[sub_resource type="Shader" id="Shader_7th0q"]
code = "shader_type canvas_item;

// === Outline Controls ===
uniform bool outline_enabled = false;
uniform vec4 outline_color    : source_color = vec4(1.0);
uniform float outline_size    : hint_range(0.0, 16.0, 0.1) = 1.0;
uniform float alpha_threshold : hint_range(0.0, 1.0, 0.01) = 0.0;
uniform int outline_samples   : hint_range(4, 8) = 4;

// === Flash Controls ===
uniform vec4 flash_color : source_color = vec4(1.0, 1.0, 1.0, 1.0);
uniform float flash_strength : hint_range(0.0, 1.0, 0.1) = 0.0;

// === Outline Sampling Directions ===
const vec2[8] DIRS = vec2[8](
	vec2(1.0, 0.0), vec2(0.0, 1.0),  vec2(-1.0, 0.0),  vec2(0.0, -1.0),
	vec2(1.0, 1.0), vec2(-1.0, 1.0), vec2(-1.0, -1.0), vec2(1.0, -1.0)
);

void fragment() {
	vec4 tex = texture(TEXTURE, UV);
	float alpha = tex.a;

	if (alpha <= 0.0 && outline_size <= 0.0) discard;

	bool solid = alpha > alpha_threshold;
	bool found_outline = false;

	// Only check outline if enabled and current pixel is transparent
	if (outline_enabled && !solid && outline_size > 0.0) {
		vec2 offset = TEXTURE_PIXEL_SIZE * outline_size;
		for (int i = 0; i < outline_samples; i++) {
			if (texture(TEXTURE, UV + DIRS[i] * offset).a > alpha_threshold) {
				found_outline = true;
				break;
			}
		}
	}

	// Color decision
	if (solid) {
		COLOR = tex;
	} else if (outline_enabled && found_outline) {
		COLOR = outline_color;
	} else {
		discard;
	}

	// === Flash Effect ===
	COLOR.rgb = mix(COLOR.rgb, flash_color.rgb, flash_strength);
}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_r7kdd"]
shader = SubResource("Shader_7th0q")
shader_parameter/outline_enabled = true
shader_parameter/outline_color = Color(1, 0, 0, 1)
shader_parameter/outline_size = 1.0
shader_parameter/alpha_threshold = 0.0
shader_parameter/outline_samples = 4
shader_parameter/flash_color = Color(1, 1, 1, 1)
shader_parameter/flash_strength = 0.0

[sub_resource type="Shader" id="Shader_r7kdd"]
code = "shader_type canvas_item;

// === Outline Controls ===
uniform bool outline_enabled = false;
uniform vec4 outline_color    : source_color = vec4(1.0);
uniform float outline_size    : hint_range(0.0, 16.0, 0.1) = 1.0;
uniform float alpha_threshold : hint_range(0.0, 1.0, 0.01) = 0.0;
uniform int outline_samples   : hint_range(4, 8) = 4;

// === Flash Controls ===
uniform vec4 flash_color : source_color = vec4(1.0, 1.0, 1.0, 1.0);
uniform float flash_strength : hint_range(0.0, 1.0, 0.1) = 0.0;

// === Outline Sampling Directions ===
const vec2[8] DIRS = vec2[8](
	vec2(1.0, 0.0), vec2(0.0, 1.0),  vec2(-1.0, 0.0),  vec2(0.0, -1.0),
	vec2(1.0, 1.0), vec2(-1.0, 1.0), vec2(-1.0, -1.0), vec2(1.0, -1.0)
);

void fragment() {
	vec4 tex = texture(TEXTURE, UV);
	float alpha = tex.a;

	if (alpha <= 0.0 && outline_size <= 0.0) discard;

	bool solid = alpha > alpha_threshold;
	bool found_outline = false;

	// Only check outline if enabled and current pixel is transparent
	if (outline_enabled && !solid && outline_size > 0.0) {
		vec2 offset = TEXTURE_PIXEL_SIZE * outline_size;
		for (int i = 0; i < outline_samples; i++) {
			if (texture(TEXTURE, UV + DIRS[i] * offset).a > alpha_threshold) {
				found_outline = true;
				break;
			}
		}
	}

	// Color decision
	if (solid) {
		COLOR = tex;
	} else if (outline_enabled && found_outline) {
		COLOR = outline_color;
	} else {
		discard;
	}

	// === Flash Effect ===
	COLOR.rgb = mix(COLOR.rgb, flash_color.rgb, flash_strength);
}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_0p2h0"]
shader = SubResource("Shader_r7kdd")
shader_parameter/outline_enabled = true
shader_parameter/outline_color = Color(1, 0, 0, 1)
shader_parameter/outline_size = 1.0
shader_parameter/alpha_threshold = 0.0
shader_parameter/outline_samples = 4
shader_parameter/flash_color = Color(1, 1, 1, 1)
shader_parameter/flash_strength = 0.0

[sub_resource type="RectangleShape2D" id="RectangleShape2D_akxlh"]
size = Vector2(28, 48)

[sub_resource type="RectangleShape2D" id="RectangleShape2D_bemkk"]
size = Vector2(22, 38)

[sub_resource type="Curve" id="Curve_0p2h0"]
_data = [Vector2(0, 1), 0.0, 0.0, 0, 0, Vector2(0.919831, 0), 0.0, 0.0, 0, 0]
point_count = 2

[sub_resource type="CurveTexture" id="CurveTexture_64dyw"]
curve = SubResource("Curve_0p2h0")

[sub_resource type="ParticleProcessMaterial" id="ParticleProcessMaterial_56ue7"]
lifetime_randomness = 0.4
particle_flag_disable_z = true
emission_shape = 3
emission_box_extents = Vector3(15, 1, 1)
direction = Vector3(0, -1, 0)
spread = 0.0
initial_velocity_min = 70.0
initial_velocity_max = 90.0
gravity = Vector3(0, 0, 0)
scale_max = 3.0
scale_curve = SubResource("CurveTexture_64dyw")

[node name="GodotArm" type="Node2D"]
material = SubResource("ShaderMaterial_r7kdd")
script = ExtResource("1_7th0q")
metadata/_custom_type_script = "uid://djnp2yh5h2uih"

[node name="Sprite2D" type="Sprite2D" parent="."]
material = SubResource("ShaderMaterial_0p2h0")
rotation = 1.5708
texture = ExtResource("3_r7kdd")

[node name="HurtboxComponent" type="Area2D" parent="." node_paths=PackedStringArray("entity")]
collision_layer = 16
collision_mask = 0
script = ExtResource("4_0p2h0")
entity = NodePath("..")
metadata/_custom_type_script = "uid://chv2lphkgpnes"

[node name="CollisionShape2D" type="CollisionShape2D" parent="HurtboxComponent"]
shape = SubResource("RectangleShape2D_akxlh")

[node name="HitboxComponent" type="Area2D" parent="." node_paths=PackedStringArray("entity")]
collision_layer = 0
script = ExtResource("5_64dyw")
entity = NodePath("..")
metadata/_custom_type_script = "uid://dkij5hjdnu422"

[node name="CollisionShape2D" type="CollisionShape2D" parent="HitboxComponent"]
shape = SubResource("RectangleShape2D_bemkk")

[node name="IdleMoveComponent" type="Node" parent="." node_paths=PackedStringArray("entity")]
script = ExtResource("6_ts7ta")
direction = Vector2(1, 0)
angular_speed = 6.0
circle_radius = 3.0
entity = NodePath("..")
metadata/_custom_type_script = "uid://co2kl5qnx2yrs"

[node name="GPUParticles2D" type="GPUParticles2D" parent="."]
modulate = Color(1, 0, 0, 1)
show_behind_parent = true
amount = 15
texture = ExtResource("8_r7kdd")
process_material = SubResource("ParticleProcessMaterial_56ue7")

[node name="GhostTrailingComponent" type="Node" parent="." node_paths=PackedStringArray("sprite", "entity")]
script = ExtResource("8_0p2h0")
sprite = NodePath("../Sprite2D")
active = false
entity = NodePath("..")
metadata/_custom_type_script = "uid://1hf68snymgbl"

[node name="HitFlashComponent" type="Node" parent="." node_paths=PackedStringArray("sprite", "entity")]
script = ExtResource("8_64dyw")
sprite = NodePath("../Sprite2D")
entity = NodePath("..")
metadata/_custom_type_script = "uid://c3dex51h0lylc"

[node name="ExplodePos" type="Marker2D" parent="."]
position = Vector2(0, 27)

[connection signal="hurt" from="HurtboxComponent" to="HitFlashComponent" method="flash_no_args"]
