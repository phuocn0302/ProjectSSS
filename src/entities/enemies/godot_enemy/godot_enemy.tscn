[gd_scene load_steps=8 format=3 uid="uid://7fx33mvlv67i"]

[ext_resource type="PackedScene" uid="uid://bqar27ptqt5xu" path="res://src/entities/enemies/generic_enemy.tscn" id="1_jr0pm"]
[ext_resource type="Texture2D" uid="uid://w58tf5oqek0d" path="res://assets/texture/godot.png" id="2_ghyt3"]
[ext_resource type="PackedScene" uid="uid://c3rq577ok406m" path="res://src/particles/circle_explosion.tscn" id="3_7k80t"]

[sub_resource type="Shader" id="Shader_jr0pm"]
code = "shader_type canvas_item;

// === Outline Controls ===
uniform bool outline_enabled = false;
uniform vec4 outline_color    : source_color = vec4(1.0);
uniform float outline_size    : hint_range(0.0, 16.0, 0.1) = 1.0;
uniform float alpha_threshold : hint_range(0.0, 1.0, 0.01) = 0.0;
uniform int outline_samples   : hint_range(4, 8) = 4;

// === Flash Controls ===
uniform vec4 flash_color : source_color = vec4(1.0, 1.0, 1.0, 1.0);
uniform float flash_strength : hint_range(0.0, 1.0, 0.1) = 0.0;

// === Outline Sampling Directions ===
const vec2[8] DIRS = vec2[8](
	vec2(1.0, 0.0), vec2(0.0, 1.0),  vec2(-1.0, 0.0),  vec2(0.0, -1.0),
	vec2(1.0, 1.0), vec2(-1.0, 1.0), vec2(-1.0, -1.0), vec2(1.0, -1.0)
);

void fragment() {
	vec4 tex = texture(TEXTURE, UV);
	float alpha = tex.a;

	if (alpha <= 0.0 && outline_size <= 0.0) discard;

	bool solid = alpha > alpha_threshold;
	bool found_outline = false;

	// Only check outline if enabled and current pixel is transparent
	if (outline_enabled && !solid && outline_size > 0.0) {
		vec2 offset = TEXTURE_PIXEL_SIZE * outline_size;
		for (int i = 0; i < outline_samples; i++) {
			if (texture(TEXTURE, UV + DIRS[i] * offset).a > alpha_threshold) {
				found_outline = true;
				break;
			}
		}
	}

	// Color decision
	if (solid) {
		COLOR = tex;
	} else if (outline_enabled && found_outline) {
		COLOR = outline_color;
	} else {
		discard;
	}

	// === Flash Effect ===
	COLOR.rgb = mix(COLOR.rgb, flash_color.rgb, flash_strength);
}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_ghyt3"]
resource_local_to_scene = true
shader = SubResource("Shader_jr0pm")
shader_parameter/outline_enabled = true
shader_parameter/outline_color = Color(1, 0, 0, 1)
shader_parameter/outline_size = 1.0
shader_parameter/alpha_threshold = 0.0
shader_parameter/outline_samples = 4
shader_parameter/flash_color = Color(1, 1, 1, 1)
shader_parameter/flash_strength = 0.0

[sub_resource type="CircleShape2D" id="CircleShape2D_2mr3x"]
radius = 13.1529

[sub_resource type="CircleShape2D" id="CircleShape2D_ea50s"]
radius = 19.2354

[node name="GenericEnemy" instance=ExtResource("1_jr0pm")]

[node name="Sprite2D" parent="." index="0"]
material = SubResource("ShaderMaterial_ghyt3")
rotation = 0.0
texture = ExtResource("2_ghyt3")

[node name="CollisionShape2D" type="CollisionShape2D" parent="HitboxComponent" index="0"]
shape = SubResource("CircleShape2D_2mr3x")

[node name="CollisionShape2D" type="CollisionShape2D" parent="HurtboxComponent" index="0"]
shape = SubResource("CircleShape2D_ea50s")

[node name="HealthComponent" parent="." index="5"]
max_health = 3.0
die_sfx = ExtResource("3_7k80t")
