[gd_scene load_steps=15 format=3 uid="uid://c3rq577ok406m"]

[ext_resource type="Texture2D" uid="uid://djwg6o0pu41" path="res://assets/texture/sfx/circle_explosion_2.png" id="1_uyiyp"]
[ext_resource type="PackedScene" uid="uid://dfl00xfc5e7kj" path="res://src/particles/explode_particles.tscn" id="2_sf7re"]
[ext_resource type="Script" uid="uid://bue745k8n3n7r" path="res://src/commons/components/sfx/screen_shake_component.gd" id="3_veyq0"]

[sub_resource type="Shader" id="Shader_uyiyp"]
code = "shader_type canvas_item;

// === Outline Controls ===
uniform bool outline_enabled = false;
uniform vec4 outline_color    : source_color = vec4(1.0);
uniform float outline_size    : hint_range(0.0, 16.0, 0.1) = 1.0;
uniform float alpha_threshold : hint_range(0.0, 1.0, 0.01) = 0.0;
uniform int outline_samples   : hint_range(4, 8) = 4;

// === Flash Controls ===
uniform vec4 flash_color : source_color = vec4(1.0, 1.0, 1.0, 1.0);
uniform float flash_strength : hint_range(0.0, 1.0, 0.1) = 0.0;

// === Outline Sampling Directions ===
const vec2[8] DIRS = vec2[8](
	vec2(1.0, 0.0), vec2(0.0, 1.0),  vec2(-1.0, 0.0),  vec2(0.0, -1.0),
	vec2(1.0, 1.0), vec2(-1.0, 1.0), vec2(-1.0, -1.0), vec2(1.0, -1.0)
);

void fragment() {
	vec4 tex = texture(TEXTURE, UV);
	float alpha = tex.a;

	if (alpha <= 0.0 && outline_size <= 0.0) discard;

	bool solid = alpha > alpha_threshold;
	bool found_outline = false;

	// Only check outline if enabled and current pixel is transparent
	if (outline_enabled && !solid && outline_size > 0.0) {
		vec2 offset = TEXTURE_PIXEL_SIZE * outline_size;
		for (int i = 0; i < outline_samples; i++) {
			if (texture(TEXTURE, UV + DIRS[i] * offset).a > alpha_threshold) {
				found_outline = true;
				break;
			}
		}
	}

	// Color decision
	if (solid) {
		COLOR = tex;
	} else if (outline_enabled && found_outline) {
		COLOR = outline_color;
	} else {
		discard;
	}

	// === Flash Effect ===
	COLOR.rgb = mix(COLOR.rgb, flash_color.rgb, flash_strength);
}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_sf7re"]
shader = SubResource("Shader_uyiyp")
shader_parameter/outline_enabled = true
shader_parameter/outline_color = Color(1, 0, 0, 1)
shader_parameter/outline_size = 1.0
shader_parameter/alpha_threshold = 0.0
shader_parameter/outline_samples = 4
shader_parameter/flash_color = Color(1, 1, 1, 1)
shader_parameter/flash_strength = 0.0

[sub_resource type="AtlasTexture" id="AtlasTexture_sf7re"]
atlas = ExtResource("1_uyiyp")
region = Rect2(0, 0, 34, 34)

[sub_resource type="AtlasTexture" id="AtlasTexture_veyq0"]
atlas = ExtResource("1_uyiyp")
region = Rect2(34, 0, 34, 34)

[sub_resource type="AtlasTexture" id="AtlasTexture_v6kg0"]
atlas = ExtResource("1_uyiyp")
region = Rect2(68, 0, 34, 34)

[sub_resource type="AtlasTexture" id="AtlasTexture_cbrsi"]
atlas = ExtResource("1_uyiyp")
region = Rect2(102, 0, 34, 34)

[sub_resource type="AtlasTexture" id="AtlasTexture_r2epb"]
atlas = ExtResource("1_uyiyp")
region = Rect2(136, 0, 34, 34)

[sub_resource type="AtlasTexture" id="AtlasTexture_t7v11"]
atlas = ExtResource("1_uyiyp")
region = Rect2(170, 0, 34, 34)

[sub_resource type="AtlasTexture" id="AtlasTexture_loq2w"]
atlas = ExtResource("1_uyiyp")
region = Rect2(204, 0, 34, 34)

[sub_resource type="AtlasTexture" id="AtlasTexture_5jd34"]
atlas = ExtResource("1_uyiyp")
region = Rect2(238, 0, 34, 34)

[sub_resource type="SpriteFrames" id="SpriteFrames_scsi2"]
animations = [{
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_sf7re")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_veyq0")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_v6kg0")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_cbrsi")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_r2epb")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_t7v11")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_loq2w")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_5jd34")
}],
"loop": false,
"name": &"default",
"speed": 16.0
}]

[node name="CircleExplosion" type="AnimatedSprite2D"]
material = SubResource("ShaderMaterial_sf7re")
sprite_frames = SubResource("SpriteFrames_scsi2")
autoplay = "default"

[node name="ExplodeParticles" parent="." instance=ExtResource("2_sf7re")]

[node name="ScreenShakeComponent" type="Node" parent="."]
script = ExtResource("3_veyq0")
shake_duration = 0.1
metadata/_custom_type_script = "uid://bue745k8n3n7r"

[connection signal="animation_finished" from="." to="." method="queue_free"]
[connection signal="tree_entered" from="." to="ScreenShakeComponent" method="shake"]
