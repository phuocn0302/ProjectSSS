[gd_scene load_steps=43 format=3 uid="uid://ckjlvrurfq6x2"]

[ext_resource type="Script" uid="uid://cj5lqlctqndda" path="res://entities/bosses/godot/godot_boss.gd" id="1_m4p5g"]
[ext_resource type="Texture2D" uid="uid://dnf8hqs1b4rrd" path="res://assets/texture/npc/bosses/boss_godot/base_sheet.png" id="2_52t2c"]
[ext_resource type="Texture2D" uid="uid://clq7vtr5sg8yu" path="res://assets/texture/sfx/3x_white_particle.png" id="3_52t2c"]
[ext_resource type="Script" uid="uid://chv2lphkgpnes" path="res://commons/components/etc/hurtbox_component.gd" id="3_gofui"]
[ext_resource type="Script" uid="uid://dkij5hjdnu422" path="res://commons/components/etc/hitbox_component.gd" id="4_ldboo"]
[ext_resource type="Script" uid="uid://s7docibhn2wy" path="res://commons/components/etc/health_component.gd" id="5_0jihc"]
[ext_resource type="Script" uid="uid://co2kl5qnx2yrs" path="res://commons/components/movements/idle_move_component.gd" id="7_ncdkc"]
[ext_resource type="Script" uid="uid://c3dex51h0lylc" path="res://commons/components/sfx/hit_flash_component.gd" id="8_0jihc"]
[ext_resource type="PackedScene" uid="uid://dptehxrxtfpx3" path="res://entities/bosses/godot/godot_arm.tscn" id="8_ncdkc"]
[ext_resource type="Script" uid="uid://1hf68snymgbl" path="res://commons/components/sfx/ghost_trailing_component.gd" id="9_q4ssp"]
[ext_resource type="Script" uid="uid://duxclkhsalect" path="res://commons/components/spawner/circle_proj_spawner_component.gd" id="10_v33mg"]
[ext_resource type="Resource" uid="uid://bir702nqk15lx" path="res://entities/projectiles/data_resources/enemies/circle.tres" id="12_c2l74"]
[ext_resource type="Script" uid="uid://sj2recp8wcj2" path="res://commons/components/spawner/target_proj_spawner.gd" id="12_xmx3y"]
[ext_resource type="Script" uid="uid://bonurqbakdykh" path="res://commons/components/spawner/pattern_proj_spawner_component.gd" id="13_ayqat"]
[ext_resource type="Script" uid="uid://dg0til6w02wfe" path="res://commons/state_machine/state_machine.gd" id="13_fg3tp"]
[ext_resource type="Script" uid="uid://boyt7skbgak5o" path="res://entities/bosses/godot/states/shoot_at_player.gd" id="14_0vgfa"]
[ext_resource type="Script" uid="uid://d2buvn4isauxs" path="res://entities/bosses/godot/states/idle.gd" id="14_fg3tp"]
[ext_resource type="Resource" uid="uid://btj1wpnlgy41t" path="res://entities/projectiles/data_resources/enemies/bullet.tres" id="14_lxydi"]
[ext_resource type="Script" uid="uid://bbfed12jv7o8r" path="res://entities/bosses/godot/states/punch_attack.gd" id="16_s0t23"]
[ext_resource type="Script" uid="uid://cthj31id47kl0" path="res://entities/bosses/godot/states/double_punch_attack.gd" id="17_030pk"]
[ext_resource type="Script" uid="uid://ggvdu6nn2l1t" path="res://entities/bosses/godot/states/entrance.gd" id="18_irf51"]
[ext_resource type="Script" uid="uid://cgvyv5ilsymnm" path="res://entities/bosses/godot/states/die.gd" id="19_c2l74"]
[ext_resource type="Script" uid="uid://dkhle0tg5nwm8" path="res://entities/bosses/godot/states/phase_transition.gd" id="19_irf51"]
[ext_resource type="Script" uid="uid://cbaopb0v2ypb2" path="res://entities/bosses/godot/states/shoot_at_player_2.gd" id="19_xss0f"]

[sub_resource type="Shader" id="Shader_irf51"]
code = "shader_type canvas_item;

// === Outline Controls ===
uniform bool outline_enabled = false;
uniform vec4 outline_color    : source_color = vec4(1.0);
uniform float outline_size    : hint_range(0.0, 16.0, 0.1) = 1.0;
uniform float alpha_threshold : hint_range(0.0, 1.0, 0.01) = 0.0;
uniform int outline_samples   : hint_range(4, 8) = 4;

// === Flash Controls ===
uniform vec4 flash_color : source_color = vec4(1.0, 1.0, 1.0, 1.0);
uniform float flash_strength : hint_range(0.0, 1.0, 0.1) = 0.0;

// === Outline Sampling Directions ===
const vec2[8] DIRS = vec2[8](
	vec2(1.0, 0.0), vec2(0.0, 1.0),  vec2(-1.0, 0.0),  vec2(0.0, -1.0),
	vec2(1.0, 1.0), vec2(-1.0, 1.0), vec2(-1.0, -1.0), vec2(1.0, -1.0)
);

void fragment() {
	vec4 tex = texture(TEXTURE, UV);
	float alpha = tex.a;

	if (alpha <= 0.0 && outline_size <= 0.0) discard;

	bool solid = alpha > alpha_threshold;
	bool found_outline = false;

	// Only check outline if enabled and current pixel is transparent
	if (outline_enabled && !solid && outline_size > 0.0) {
		vec2 offset = TEXTURE_PIXEL_SIZE * outline_size;
		for (int i = 0; i < outline_samples; i++) {
			if (texture(TEXTURE, UV + DIRS[i] * offset).a > alpha_threshold) {
				found_outline = true;
				break;
			}
		}
	}

	// Color decision
	if (solid) {
		COLOR = tex;
	} else if (outline_enabled && found_outline) {
		COLOR = outline_color;
	} else {
		discard;
	}

	// === Flash Effect ===
	COLOR.rgb = mix(COLOR.rgb, flash_color.rgb, flash_strength);
}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_c2l74"]
shader = SubResource("Shader_irf51")
shader_parameter/outline_enabled = true
shader_parameter/outline_color = Color(1, 0, 0, 1)
shader_parameter/outline_size = 1.0
shader_parameter/alpha_threshold = 0.0
shader_parameter/outline_samples = 4
shader_parameter/flash_color = Color(1, 1, 1, 1)
shader_parameter/flash_strength = 0.0

[sub_resource type="AtlasTexture" id="AtlasTexture_lvhoc"]
atlas = ExtResource("2_52t2c")
region = Rect2(0, 0, 48, 48)

[sub_resource type="AtlasTexture" id="AtlasTexture_q4ssp"]
atlas = ExtResource("2_52t2c")
region = Rect2(48, 0, 48, 48)

[sub_resource type="AtlasTexture" id="AtlasTexture_irf51"]
atlas = ExtResource("2_52t2c")
region = Rect2(96, 0, 48, 48)

[sub_resource type="AtlasTexture" id="AtlasTexture_c2l74"]
atlas = ExtResource("2_52t2c")
region = Rect2(144, 0, 48, 48)

[sub_resource type="AtlasTexture" id="AtlasTexture_lxydi"]
atlas = ExtResource("2_52t2c")
region = Rect2(192, 0, 48, 48)

[sub_resource type="SpriteFrames" id="SpriteFrames_uxonu"]
animations = [{
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_lvhoc")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_q4ssp")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_irf51")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_c2l74")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_lxydi")
}],
"loop": true,
"name": &"default",
"speed": 10.0
}]

[sub_resource type="Curve" id="Curve_lvhoc"]
_data = [Vector2(0, 1), 0.0, 0.0, 0, 0, Vector2(0.919831, 0), 0.0, 0.0, 0, 0]
point_count = 2

[sub_resource type="CurveTexture" id="CurveTexture_q4ssp"]
curve = SubResource("Curve_lvhoc")

[sub_resource type="ParticleProcessMaterial" id="ParticleProcessMaterial_irf51"]
lifetime_randomness = 0.4
particle_flag_disable_z = true
emission_shape = 3
emission_box_extents = Vector3(1, 1, 1)
direction = Vector3(0, -1, 0)
spread = 20.0
initial_velocity_min = 50.0
initial_velocity_max = 70.0
gravity = Vector3(0, 0, 0)
scale_min = 2.0
scale_max = 2.0
scale_curve = SubResource("CurveTexture_q4ssp")

[sub_resource type="CircleShape2D" id="CircleShape2D_bemkk"]
radius = 25.0

[sub_resource type="CircleShape2D" id="CircleShape2D_akxlh"]
radius = 22.0227

[sub_resource type="Shader" id="Shader_lxydi"]
code = "shader_type canvas_item;

// === Outline Controls ===
uniform bool outline_enabled = false;
uniform vec4 outline_color    : source_color = vec4(1.0);
uniform float outline_size    : hint_range(0.0, 16.0, 0.1) = 1.0;
uniform float alpha_threshold : hint_range(0.0, 1.0, 0.01) = 0.0;
uniform int outline_samples   : hint_range(4, 8) = 4;

// === Flash Controls ===
uniform vec4 flash_color : source_color = vec4(1.0, 1.0, 1.0, 1.0);
uniform float flash_strength : hint_range(0.0, 1.0, 0.1) = 0.0;

// === Outline Sampling Directions ===
const vec2[8] DIRS = vec2[8](
	vec2(1.0, 0.0), vec2(0.0, 1.0),  vec2(-1.0, 0.0),  vec2(0.0, -1.0),
	vec2(1.0, 1.0), vec2(-1.0, 1.0), vec2(-1.0, -1.0), vec2(1.0, -1.0)
);

void fragment() {
	vec4 tex = texture(TEXTURE, UV);
	float alpha = tex.a;

	if (alpha <= 0.0 && outline_size <= 0.0) discard;

	bool solid = alpha > alpha_threshold;
	bool found_outline = false;

	// Only check outline if enabled and current pixel is transparent
	if (outline_enabled && !solid && outline_size > 0.0) {
		vec2 offset = TEXTURE_PIXEL_SIZE * outline_size;
		for (int i = 0; i < outline_samples; i++) {
			if (texture(TEXTURE, UV + DIRS[i] * offset).a > alpha_threshold) {
				found_outline = true;
				break;
			}
		}
	}

	// Color decision
	if (solid) {
		COLOR = tex;
	} else if (outline_enabled && found_outline) {
		COLOR = outline_color;
	} else {
		discard;
	}

	// === Flash Effect ===
	COLOR.rgb = mix(COLOR.rgb, flash_color.rgb, flash_strength);
}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_uxonu"]
shader = SubResource("Shader_lxydi")
shader_parameter/outline_enabled = true
shader_parameter/outline_color = Color(1, 0, 0, 1)
shader_parameter/outline_size = 1.0
shader_parameter/alpha_threshold = 0.0
shader_parameter/outline_samples = 4
shader_parameter/flash_color = Color(1, 1, 1, 1)
shader_parameter/flash_strength = 0.0

[sub_resource type="Shader" id="Shader_c2l74"]
code = "shader_type canvas_item;

// === Outline Controls ===
uniform bool outline_enabled = false;
uniform vec4 outline_color    : source_color = vec4(1.0);
uniform float outline_size    : hint_range(0.0, 16.0, 0.1) = 1.0;
uniform float alpha_threshold : hint_range(0.0, 1.0, 0.01) = 0.0;
uniform int outline_samples   : hint_range(4, 8) = 4;

// === Flash Controls ===
uniform vec4 flash_color : source_color = vec4(1.0, 1.0, 1.0, 1.0);
uniform float flash_strength : hint_range(0.0, 1.0, 0.1) = 0.0;

// === Outline Sampling Directions ===
const vec2[8] DIRS = vec2[8](
	vec2(1.0, 0.0), vec2(0.0, 1.0),  vec2(-1.0, 0.0),  vec2(0.0, -1.0),
	vec2(1.0, 1.0), vec2(-1.0, 1.0), vec2(-1.0, -1.0), vec2(1.0, -1.0)
);

void fragment() {
	vec4 tex = texture(TEXTURE, UV);
	float alpha = tex.a;

	if (alpha <= 0.0 && outline_size <= 0.0) discard;

	bool solid = alpha > alpha_threshold;
	bool found_outline = false;

	// Only check outline if enabled and current pixel is transparent
	if (outline_enabled && !solid && outline_size > 0.0) {
		vec2 offset = TEXTURE_PIXEL_SIZE * outline_size;
		for (int i = 0; i < outline_samples; i++) {
			if (texture(TEXTURE, UV + DIRS[i] * offset).a > alpha_threshold) {
				found_outline = true;
				break;
			}
		}
	}

	// Color decision
	if (solid) {
		COLOR = tex;
	} else if (outline_enabled && found_outline) {
		COLOR = outline_color;
	} else {
		discard;
	}

	// === Flash Effect ===
	COLOR.rgb = mix(COLOR.rgb, flash_color.rgb, flash_strength);
}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_lxydi"]
shader = SubResource("Shader_c2l74")
shader_parameter/outline_enabled = true
shader_parameter/outline_color = Color(1, 0, 0, 1)
shader_parameter/outline_size = 1.0
shader_parameter/alpha_threshold = 0.0
shader_parameter/outline_samples = 4
shader_parameter/flash_color = Color(1, 1, 1, 1)
shader_parameter/flash_strength = 0.0

[sub_resource type="Curve2D" id="Curve2D_ayqat"]
_data = {
"points": PackedVector2Array(0, 0, 0, 0, 0, -48, 0, 0, 0, 0, -8, -48, 0, 0, 0, 0, -16, -56, 0, 0, 0, 0, -16, -72, 0, 0, 0, 0, -24, -80, 0, 0, 0, 0, -16, -88, 0, 0, 0, 0, -8, -80, 0, 0, 0, 0, -8, -88, 0, 0, 0, 0, 0, -88, 0, 0, 0, 0, 4, -80, 0, 0, 0, 0, 8, -88, 0, 0, 0, 0, 16, -88, 0, 0, 0, 0, 16, -80, 0, 0, 0, 0, 24, -88, 0, 0, 0, 0, 32, -80, 0, 0, 0, 0, 24, -72, 0, 0, 0, 0, 24, -56, 0, 0, 0, 0, 16, -48, 0, 0, 0, 0, 0, -48)
}
point_count = 19

[node name="GodotBoss" type="Node2D" node_paths=PackedStringArray("phase1_states", "phase2_states", "phase3_states")]
script = ExtResource("1_m4p5g")
phase1_states = [NodePath("StateMachine/ShootAtPlayer1")]
phase2_states = [NodePath("StateMachine/ShootAtPlayer1"), NodePath("StateMachine/PunchAttack")]
phase3_states = [NodePath("StateMachine/ShootAtPlayer2"), NodePath("StateMachine/DoublePunchAttack"), NodePath("StateMachine/PunchAttack")]
metadata/_custom_type_script = "uid://efllwjrpocom"

[node name="AnimatedSprite2D" type="AnimatedSprite2D" parent="."]
material = SubResource("ShaderMaterial_c2l74")
sprite_frames = SubResource("SpriteFrames_uxonu")
autoplay = "default"
frame_progress = 0.977381

[node name="EyeParticles" type="GPUParticles2D" parent="."]
modulate = Color(1, 0, 0, 1)
position = Vector2(-10, 1)
amount = 12
texture = ExtResource("3_52t2c")
process_material = SubResource("ParticleProcessMaterial_irf51")

[node name="Components" type="Node2D" parent="."]

[node name="HurtboxComponent" type="Area2D" parent="Components" node_paths=PackedStringArray("health_component", "entity")]
collision_layer = 16
collision_mask = 0
script = ExtResource("3_gofui")
health_component = NodePath("../HealthComponent")
entity = NodePath("../..")
metadata/_custom_type_script = "uid://chv2lphkgpnes"

[node name="CollisionShape2D" type="CollisionShape2D" parent="Components/HurtboxComponent"]
shape = SubResource("CircleShape2D_bemkk")

[node name="HitboxComponent" type="Area2D" parent="Components" node_paths=PackedStringArray("entity")]
collision_layer = 0
script = ExtResource("4_ldboo")
entity = NodePath("../..")
metadata/_custom_type_script = "uid://dkij5hjdnu422"

[node name="CollisionShape2D" type="CollisionShape2D" parent="Components/HitboxComponent"]
shape = SubResource("CircleShape2D_akxlh")

[node name="HealthComponent" type="Node" parent="Components" node_paths=PackedStringArray("entity")]
script = ExtResource("5_0jihc")
max_health = 400.0
queue_free_on_die = false
entity = NodePath("../..")
metadata/_custom_type_script = "uid://s7docibhn2wy"

[node name="HitFlashComponent" type="Node" parent="Components" node_paths=PackedStringArray("sprite", "health_component", "entity")]
script = ExtResource("8_0jihc")
sprite = NodePath("../../AnimatedSprite2D")
health_component = NodePath("../HealthComponent")
active = false
entity = NodePath("../..")
metadata/_custom_type_script = "uid://c3dex51h0lylc"

[node name="IdleMoveComponent" type="Node" parent="Components" node_paths=PackedStringArray("entity")]
script = ExtResource("7_ncdkc")
move_type = 1
angular_speed = 4.0
circle_radius = 3.0
figure8_amplitude = 8.0
entity = NodePath("../..")
metadata/_custom_type_script = "uid://co2kl5qnx2yrs"

[node name="GhostTrailingComponent" type="Node" parent="Components" node_paths=PackedStringArray("anim_sprite", "entity")]
script = ExtResource("9_q4ssp")
anim_sprite = NodePath("../../AnimatedSprite2D")
active = false
entity = NodePath("../..")
metadata/_custom_type_script = "uid://1hf68snymgbl"

[node name="Arms" type="Node2D" parent="."]

[node name="RightArmPos" type="Marker2D" parent="Arms"]
position = Vector2(49, 24)

[node name="LeftArmPos" type="Marker2D" parent="Arms"]
position = Vector2(-49, 24)

[node name="RightArm" parent="Arms" node_paths=PackedStringArray("godot_boss", "active_position") instance=ExtResource("8_ncdkc")]
position = Vector2(49, 24)
godot_boss = NodePath("../..")
active_position = NodePath("../RightArmPos")

[node name="Sprite2D" parent="Arms/RightArm" index="0"]
material = SubResource("ShaderMaterial_uxonu")

[node name="HurtboxComponent" parent="Arms/RightArm" index="1" node_paths=PackedStringArray("health_component")]
health_component = NodePath("../../../Components/HealthComponent")

[node name="IdleMoveComponent" parent="Arms/RightArm" index="3"]
direction = Vector2(-1, 0)

[node name="LeftArm" parent="Arms" node_paths=PackedStringArray("godot_boss", "active_position") instance=ExtResource("8_ncdkc")]
position = Vector2(-49, 24)
godot_boss = NodePath("../..")
active_position = NodePath("../LeftArmPos")

[node name="Sprite2D" parent="Arms/LeftArm" index="0"]
material = SubResource("ShaderMaterial_lxydi")
scale = Vector2(1, -1)

[node name="HurtboxComponent" parent="Arms/LeftArm" index="1" node_paths=PackedStringArray("health_component")]
health_component = NodePath("../../../Components/HealthComponent")

[node name="Spawner" type="Node2D" parent="."]

[node name="CircleProjectileSpawner" type="Node2D" parent="Spawner"]
script = ExtResource("10_v33mg")
rotate_pattern = true
projectile_data = ExtResource("12_c2l74")
spawn_interval = 1.0
active = false
metadata/_custom_type_script = "uid://duxclkhsalect"

[node name="TargetProjectileSpawner" type="Node2D" parent="Spawner"]
script = ExtResource("12_xmx3y")
projectile_data = ExtResource("14_lxydi")
spawn_interval = 0.3
active = false
metadata/_custom_type_script = "uid://sj2recp8wcj2"

[node name="PatternProjectileSpawner" type="Node2D" parent="Spawner"]
script = ExtResource("13_ayqat")
number_of_projectiles = 30
projectile_data = ExtResource("12_c2l74")
spawn_interval = 2.0
active = false
metadata/_custom_type_script = "uid://bonurqbakdykh"

[node name="Path2D" type="Path2D" parent="Spawner/PatternProjectileSpawner"]
visible = false
position = Vector2(-4, 75)
curve = SubResource("Curve2D_ayqat")

[node name="StateMachine" type="Node" parent="." node_paths=PackedStringArray("actor", "starting_state")]
script = ExtResource("13_fg3tp")
actor = NodePath("..")
starting_state = NodePath("Entrance")
metadata/_custom_type_script = "uid://dg0til6w02wfe"

[node name="Entrance" type="Node" parent="StateMachine"]
script = ExtResource("18_irf51")
metadata/_custom_type_script = "uid://b31a7kb51yxfm"

[node name="Idle" type="Node" parent="StateMachine"]
script = ExtResource("14_fg3tp")
metadata/_custom_type_script = "uid://b31a7kb51yxfm"

[node name="Die" type="Node" parent="StateMachine"]
script = ExtResource("19_c2l74")
metadata/_custom_type_script = "uid://b31a7kb51yxfm"

[node name="PhaseTransition" type="Node" parent="StateMachine"]
script = ExtResource("19_irf51")
metadata/_custom_type_script = "uid://b31a7kb51yxfm"

[node name="ShootAtPlayer1" type="Node" parent="StateMachine"]
script = ExtResource("14_0vgfa")
metadata/_custom_type_script = "uid://ckdlwxt7cdufi"

[node name="ShootAtPlayer2" type="Node" parent="StateMachine"]
script = ExtResource("19_xss0f")
metadata/_custom_type_script = "uid://b31a7kb51yxfm"

[node name="PunchAttack" type="Node" parent="StateMachine"]
script = ExtResource("16_s0t23")
metadata/_custom_type_script = "uid://b31a7kb51yxfm"

[node name="DoublePunchAttack" type="Node" parent="StateMachine"]
script = ExtResource("17_030pk")
metadata/_custom_type_script = "uid://b31a7kb51yxfm"

[connection signal="health_depleted" from="Components/HealthComponent" to="." method="_on_health_component_health_depleted"]
[connection signal="health_reached_zero" from="Components/HealthComponent" to="." method="_on_health_component_health_reached_zero"]
[connection signal="finished" from="StateMachine/Entrance" to="." method="_phase1_transtion"]

[editable path="Arms/RightArm"]
[editable path="Arms/LeftArm"]
