[gd_scene load_steps=12 format=3 uid="uid://b5g2rcdyndfgf"]

[ext_resource type="Script" uid="uid://bg4gv4kmpx0mh" path="res://entities/projectiles/projectile.gd" id="1_nyhnm"]
[ext_resource type="Texture2D" uid="uid://f3wgaxd603wp" path="res://assets/texture/projectiles/npc/round_bullet.png" id="3_1dfqm"]
[ext_resource type="Texture2D" uid="uid://8wkr5neo2iq7" path="res://assets/texture/sfx/4x_white_particle.png" id="3_we7i0"]
[ext_resource type="Script" uid="uid://dkij5hjdnu422" path="res://commons/components/hitbox_component.gd" id="4_80hcv"]
[ext_resource type="Script" uid="uid://dxeqbg4jauco4" path="res://particles/projectile_particles.gd" id="7_l4iih"]

[sub_resource type="Shader" id="Shader_d013c"]
code = "shader_type canvas_item;

// === User Controls ===

// Color of the outline
uniform vec4 outline_color    : source_color = vec4(1.0);
// How far to search around a pixel for solid neighbors (in texels)
uniform float outline_size    : hint_range(0.0, 16.0, 0.1) = 1.0;
// Minimum alpha for a pixel to be considered solid
uniform float alpha_threshold : hint_range(0.0, 1.0, 0.01) = 0.0;
// Number of directions to sample from (max 8)
uniform int outline_samples   : hint_range(4, 8) = 4;
// Color to blend with solid pixels (alpha is blend strength)
uniform vec4 shade_color      : source_color = vec4(1.0, 1.0, 1.0, 0.5);

// === Outline Sampling Directions ===

const vec2[8] DIRS = vec2[8]
(vec2(1.0, 0.0), vec2(0.0, 1.0),  vec2(-1.0, 0.0),  vec2(0.0, -1.0),
 vec2(1.0, 1.0), vec2(-1.0, 1.0), vec2(-1.0, -1.0), vec2(1.0, -1.0));

// === Main Fragment ===

void fragment() {
	vec4 tex = texture(TEXTURE, UV);
	float alpha = tex.a;

	 // Skip fully transparent pixel with no outline
	if (alpha <= 0.0 && outline_size <= 0.0) discard;

	bool solid = alpha > alpha_threshold;
	bool semi  = (alpha > 0.0) && !solid;
	vec4 out_color = tex;

	// Blend solid pixels toward the shade_color based on its alpha
	if (solid && shade_color.a > 0.0) {
		out_color.rgb = mix(tex.rgb, shade_color.rgb, shade_color.a);
		out_color.a   = alpha;
	}

	bool found = false;

	// If not solid, check surrounding pixels for solid neighbors
	if (!solid && outline_size > 0.0) {
		vec2 offset = TEXTURE_PIXEL_SIZE * outline_size;
		for (int i = 0; i < outline_samples; i++) {
			if (texture(TEXTURE, UV + DIRS[i] * offset).a > alpha_threshold) {
				found = true;
				break;
			}
		}
	}

	// Set final pixel color
	if      (solid) COLOR = out_color;
	else if (found) COLOR = outline_color;
	else if (semi)  COLOR = tex;
	else            discard;
}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_o0fp3"]
shader = SubResource("Shader_d013c")
shader_parameter/outline_color = Color(1, 0, 0.0166664, 1)
shader_parameter/outline_size = 1.0
shader_parameter/alpha_threshold = 0.0
shader_parameter/outline_samples = 4
shader_parameter/shade_color = Color(1, 1, 1, 0.5)

[sub_resource type="RectangleShape2D" id="RectangleShape2D_mkp7b"]
size = Vector2(4, 4)

[sub_resource type="Curve" id="Curve_faxpo"]
_data = [Vector2(0, 1), 0.0, 0.0, 0, 0, Vector2(0.919831, 0), 0.0, 0.0, 0, 0]
point_count = 2

[sub_resource type="CurveTexture" id="CurveTexture_wtblw"]
curve = SubResource("Curve_faxpo")

[sub_resource type="ParticleProcessMaterial" id="ParticleProcessMaterial_80hcv"]
lifetime_randomness = 0.4
particle_flag_disable_z = true
emission_shape = 3
emission_box_extents = Vector3(1, 1, 1)
direction = Vector3(-1, 0, 0)
spread = 20.0
initial_velocity_min = 30.0
initial_velocity_max = 50.0
gravity = Vector3(0, 0, 0)
scale_curve = SubResource("CurveTexture_wtblw")

[node name="CircleProjectile" type="Node2D"]
script = ExtResource("1_nyhnm")
max_speed = 150.0
lifetime = 5.0
metadata/_custom_type_script = "uid://bg4gv4kmpx0mh"

[node name="Sprite2D" type="Sprite2D" parent="."]
material = SubResource("ShaderMaterial_o0fp3")
texture = ExtResource("3_1dfqm")

[node name="HitboxComponent" type="Area2D" parent="." node_paths=PackedStringArray("entity")]
collision_layer = 0
script = ExtResource("4_80hcv")
entity = NodePath("..")
metadata/_custom_type_script = "uid://dkij5hjdnu422"

[node name="CollisionShape2D" type="CollisionShape2D" parent="HitboxComponent"]
shape = SubResource("RectangleShape2D_mkp7b")

[node name="ProjectileParticles" type="GPUParticles2D" parent="." node_paths=PackedStringArray("projectile")]
modulate = Color(1, 0, 0, 1)
show_behind_parent = true
scale = Vector2(1, 0.975463)
texture = ExtResource("3_we7i0")
process_material = SubResource("ParticleProcessMaterial_80hcv")
script = ExtResource("7_l4iih")
projectile = NodePath("..")
metadata/_custom_type_script = "uid://dxeqbg4jauco4"
